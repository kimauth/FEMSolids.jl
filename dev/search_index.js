var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FEMSolids","category":"page"},{"location":"#FEMSolids","page":"Home","title":"FEMSolids","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FEMSolids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides routines that are needed for solving the assignments in FEM Solids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FEMSolids]","category":"page"},{"location":"#FEMSolids.LinearElasticity","page":"Home","title":"FEMSolids.LinearElasticity","text":"LinearElasticity{dim}(;G, K) where dim\n\nConstruct a LinearElasticity material based on the shear modulus G and the bulk modulus K.\n\n\n\n\n\n","category":"type"},{"location":"#FEMSolids.Neumann","page":"Home","title":"FEMSolids.Neumann","text":"Neumann(f::Function, faceset::Set{FaceIndex}, nfaces::Int)\n\nRepresent a Neumann boundary condition.\n\nArguments:\n\nf: Prescribed traction as a function f(x,t), with spatial coordinate x and time t\nfaceset: The faces on which the boundary condition acts\nnfaces: Number of faces per cell\n\nExample:\n\ngrid = generate_grid(Quadrilateral, (5,5))\n\nprescribed_traction(x,t) = Vec(zero(t), x[1]*t)\nfaceset = getfaceset(grid, \"top\")\nnfaces = nfaces(getcells(grid, 1))\n\nneumann_bc = Neumann(prescribed_traction, faceset, nfaces)\n\nnote: Note\nNeumann needs to be updated once for each time step with update! and once for each cell with update_cell!. \n\n\n\n\n\n","category":"type"},{"location":"#FEMSolids.Primal","page":"Home","title":"FEMSolids.Primal","text":"Primal(material, thickness::Float64)\n\nRepresent the weak form of the moment equilibrium in primal format:\n\nint_Omega boldsymbolsigma  boldsymbolvarepsilon(delta boldsymbolu)  mathrmdOmega =\nint_Omega boldsymbolb cdot deltaboldsymbolu  mathrmdOmega + int_partialOmega_mathrmN boldsymbolt_mathrmp cdot deltaboldsymbolu  mathrmdGamma\n\nwhere boldsymbolsigma is the stress tensor, $ \\boldsymbol{\\varepsilon} $ is  the strain tensor, $ \\boldsymbol{b} $ is the vector of body forces, $ \\boldsymbol{t}_\\mathrm{p} $ is the prescribed boundary traction and $ \\delta \\boldsymbol{u} $ is the test function.\n\nBoundary conditions on the Dirichlet boundary Gamma_textD and the Neumann boundary Gamma_textN are respectively given as:\n\nbeginaligned\nboldsymbolu = boldsymbolu_textp quad texton quad Gamma_textD \nboldsymbolsigma cdot boldsymboln = boldsymbolt_textp quad texton quad Gamma_textN \nendaligned\n\nwhere boldsymbolu is the displacement field.\n\nArguments:\n\nmateral: Material model for the stress-strain relation\nthickness: Cross-sectional area / out-of-plane thickness for 1D / 2D problems \n\n\n\n\n\n","category":"type"},{"location":"#FEMSolids.element_routine!","page":"Home","title":"FEMSolids.element_routine!","text":"element_routine!(weak_form::Primal, ke, fe, fe_external, cv, xe, ue [, fv, neumann_bc::Neumann])\n\nCompute the element stiffness matrix ke, the internal force vector fe and the external  force vector fe_external:\n\nbeginaligned\n\nleft( textttke right)_ij = aleft( boldsymbolN^(rm u)_i  boldsymbolN^(rm u)_j right)\n= int_Omega boldsymbolnabla^textsym boldsymbolN^(rm u)_i  boldsymbolmathsfE \nboldsymbolnabla^textsym boldsymbolN^(rm u)_j rm d Omega \n\nleft( textttfe right)_i = aleft( boldsymbolu  boldsymbolN^(rm u)_j right)\n= int_Omega boldsymbolnabla^textsym boldsymbolu  boldsymbolmathsfE \nboldsymbolnabla^textsym boldsymbolN^(rm u)_j rm d Omega \n\nleft( textttfe_external right)_i = lleft( boldsymbolN^(rm u)_i right)\n= int_Gamma^(rm u)_textN  boldsymbolN^(rm u)_i cdot boldsymbolt_textp  rm d Gamma\n\nendaligned\n\nwhere boldsymbolN^(rm u)_i is the shape function for the i-th degree of freedom, $ \\mathsf{E} $ is the 4-th order elastic stiffness tensor, boldsymbolu is the  displacement and boldsymbolt_mathrmp is the prescribed traction.\n\nArguments:\n\nweak_form: weak form representation\nke: element stiffness matrix\nfe: element force vector\ncv: CellVectorValues\nxe: element coordinate vector\nue: element displacement vector\n\nOptional arguments for integrating the load vector:\n\nfv: FaceVectorValues\nneumann_bc: Neumann boundary condition\n\n\n\n\n\n","category":"function"},{"location":"#FEMSolids.linear_to_quadratic-Union{Tuple{G}, Tuple{T}, Tuple{DofHandler{2, T, G}, DofHandler{2, T, G}, Any}} where {T, G<:(Grid{2, Triangle})}","page":"Home","title":"FEMSolids.linear_to_quadratic","text":"linear_to_quadratic(dh_lin::DofHandler{2,T,G}, dh_quad::DofHandler{2,T,G}, a_lin) where {T, G<:Grid{2,Triangle}}\n\nInterpolate the linear solution a_lin (associated with dh_lin) to the degrees of freedom of the quadratic DofHandler dh_quad. Return the interpolated values as a vector ordered according to the dofs in dh_quad. Restricted to vector valued fields.\n\n\n\n\n\n","category":"method"},{"location":"#FEMSolids.refine-Tuple{Grid{2, Triangle}, Any}","page":"Home","title":"FEMSolids.refine","text":"refine(grid::Grid, cells_to_split)\n\nRefine the given grid by applying the Rivara algorithm where cells_to_split is the list of cells to define (should contain cell numbers). The grid must include a Topology for the refinement to work. Construct the first grid as follows, all grids that are returned by refine include the topology information:\n\ngrid = generate_grid(Triangle, (nel_x, nel_y), lower_left, upper_right; ; build_topology=true)\n\nThis implementation is restricted to linear 2D Triangles.\n\nIn order to use this function, you need to use the CA4 branch of Ferrite.jl. You can add it as follows:\n\npkg> add Ferrite#CA4\n\nwarning: Warning\nnodesets, facesets and cellsets are currently lost after refinement and must be reconstructed. They can be added to a grid in the following manner:addfaceset!(mesh, \"left\", x -> x[1] ≈ 0.0)\naddfaceset!(mesh, \"bottom\", x -> x[2] ≈ 0.0)\naddfaceset!(mesh, \"Γₗ\", x -> (x[1] <= h && x[2] ≈ h))\n\n\n\n\n\n","category":"method"},{"location":"#FEMSolids.update_cell!-Tuple{Neumann, Int64}","page":"Home","title":"FEMSolids.update_cell!","text":"update_cell!(bc::Neumann, cellid::Int)\n\nUpdate the Neumann boundary condition bc with the current cellid.\n\n\n\n\n\n","category":"method"},{"location":"#Ferrite.update!","page":"Home","title":"Ferrite.update!","text":"update!(bc::Neumann, time::Float64=0.0)\n\nUpdate the Neumann boundary condition bc for the current time.\n\n\n\n\n\n","category":"function"}]
}
