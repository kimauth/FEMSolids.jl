var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FEMSolids","category":"page"},{"location":"#FEMSolids","page":"Home","title":"FEMSolids","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FEMSolids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides routines that are needed for solving the assignments in FEM Solids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FEMSolids]","category":"page"},{"location":"#FEMSolids.LinearElasticity-Union{Tuple{}, Tuple{dim}} where dim","page":"Home","title":"FEMSolids.LinearElasticity","text":"LinearElasticity{dim}(;G, K) where dim\n\nConstruct a LinearElasticity material based on the shear modulus G and the bulk modulus K.\n\n\n\n\n\n","category":"method"},{"location":"#FEMSolids.Primal","page":"Home","title":"FEMSolids.Primal","text":"Primal\n\nThis struct is used for dispatching which element_routine! is used when you add your own element routines. Primal refers to the primal format of the moment equilibrium:\n\n- boldsymbolsigma cdot boldsymbolnabla = boldsymbol0\n\nwith boundary conditions on the boundary Gamma = Gamma_textD cup Gamma_textN\n\nbeginaligned\nboldsymbolu = boldsymbolu_textp quad texton quad Gamma_textD \nboldsymbolt = boldsymbolt_textp quad texton quad Gamma_textN \nendaligned\n\nwhere boldsymbolu is the primary unknown field.\n\n\n\n\n\n","category":"type"},{"location":"#FEMSolids.element_routine!","page":"Home","title":"FEMSolids.element_routine!","text":"element_routine!(::Primal, ke, fe, cv, xe, material, thickness[, fv, grid, cellid, tₚ, faceset_name])\n\nCompute the element stiffness matrix ke and the element external load vector fe:\n\nbeginaligned\n\nleft( ke right)_ij = aleft( boldsymbolN^(rm u)_i  boldsymbolN^(rm u)_j right)\n= int_Omega boldsymbolnabla^textsym boldsymbolN^(rm u)_i  boldsymbolmathsfE \nboldsymbolnabla^textsym boldsymbolN^(rm u)_j rm d Omega \n\nleft( fe right)_i = lleft( boldsymbolN^(rm u)_i right)\n= int_Gamma^(rm u)_textN  boldsymbolN^(rm u)_i cdot boldsymbolt_textp  rm d Gamma\n\nendaligned\n\nArguments:\n\nke: element stiffness matrix\nfe: element force vector\ncv: CellVectorValues\nxe: element coordinate vector\nmaterial: material parameters, for instant only LinearElasticity is allowed\nthickness: out-of-plane thickness\n\nOptional arguments for integrating the load vector:\n\nfv: FaceVectorValues\ngrid: Grid\ncellid: global cell index of the current cell\ntₚ: traction vector\nfaceset_name: name of the faceset over which the load vector should be integrated\n\n\n\n\n\n","category":"function"}]
}
